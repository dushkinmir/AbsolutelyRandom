name: Build and Release Java Project

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            ${{ runner.os }}-maven-legacy

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'

      - name: Update Version from VERSION.txt and Update plugin.yml
        id: bump_version
        run: |
          # Read version from VERSION
          new_version=$(cat VERSION)
          echo "New version: $new_version"
          
          # Check current version in pom.xml
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          # Only update if the new version is different
          if [ "$new_version" != "$current_version" ]; then
            # Update plugin.yml with new version (only update version field)
            sed -i "s/^version: .*/version: $new_version/" src/main/resources/plugin.yml
          
            # Update pom.xml with new version
            mvn versions:set -DnewVersion=$new_version -DgenerateBackupPoms=false
          
            # Create and push tag
            git tag "$new_version"
            git push origin HEAD:main
            git push origin "$new_version"
          
            echo "Tag created: $new_version"  # Логируем создание тега
            echo "RELEASE_TAG=$new_version" >> $GITHUB_ENV
          else
            echo "Version is unchanged: $current_version"
            echo "RELEASE_TAG=$current_version" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: target/AbsolutelyRandom-${{ env.RELEASE_TAG }}.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
